---
- hosts: all
  vars:
    ansible_host_key_checking: false
  tasks:
    - name: Run any extra commands before deploy
      command: "{{ item }}"
      with_items:
        - "{{ before_deploy_commands }}"
      when: before_deploy_commands is defined
      
    - name: Install git
      apt:
        name: git
        state: present
        update_cache: no
      become: yes

    - name: Copy deploy keys to host
      copy:
        src: "{{ item }}"
        dest: "/home/{{ ansible_user }}/.ssh/"
        mode: '600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      with_items:
        - "{{ local_ssh_dir }}{{ public_key }}"
        - "{{ local_ssh_dir }}{{ private_key }}"
      become: yes

    #- name: Update permissions of deploy keys
    #  file:
    #    path: "/home//.ssh/{{ item }}"
    #    mode: '600'
    #  with_items:
    #    - "{{ local_ssh_dir }}{{ public_key }}"
    #    - "{{ local_ssh_dir }}{{ private_key }}"
    #  become: yes

    - name: Check if project folder is empty (first time deploy)
      stat:
        path: "{{ server_directory }}/.git"
      register: project_directory

    - name: Create server directory if it does not exist
      file:
        path: "{{ server_directory }}"
        state: directory
      when: project_directory.stat.exists == false

    # See: https://stackoverflow.com/a/37096534/100134
    - name: Ensure setfacl support is present.
      package: name=acl

    - name: If first time deploy clone the project
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ server_directory }}/git"
        accept_hostkey: yes
        key_file: "~/.ssh/{{ private_key }}"
        version: "{{ branch_to_pull }}"
      when: project_directory.stat.exists == false

    - name: Do a git pull to update the project
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ server_directory }}"
        accept_hostkey: yes
        key_file: "~/.ssh/{{ private_key }}"
        update: yes
        version: "{{ branch_to_pull }}"
      when: project_directory.stat.exists

    - name: Move cloned files to upper directory
      command: cp -r {{ server_directory }}/git/. {{ server_directory }}/
      when: project_directory.stat.exists == false

    - name: Delete cloned repo
      file:
        state: absent
        path: "{{ server_directory }}/git"
      when: project_directory.stat.exists == false
      
    - name: Run any extra commands after deploy
      command: "{{ item }}"
      with_items:
        - "{{ after_deploy_commands }}"
      when: after_deploy_commands is defined
